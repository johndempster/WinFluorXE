Comment: Native Code Setup Engine 32 bit-64 bit Installer Project
 
[DEFINE REGION: Check Application Requirements]
Get System Setting Administrator Rights into CHECKSYSTEM
if Variable CHECKSYSTEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, This product requires at least Administrator Privileges.$NEWLINE$$NEWLINE$Setup cannot continue.
  Terminate Installation
end
[END REGION]
 
[DEFINE REGION: Check/Install Application Pre-Requisites]
 
[DEFINE REGION: Check Application Pre-Requisites]
Comment: Check setup pre-requisites
Set Variable PREREQ to FALSE
Set Variable PRELIST to 
[compiler if Variable BUILDMODE not Equals PATCH]
if Variable NEEDSUPGRADE Equals TRUE
  Comment: Uninstall via Windows Installer
  Set Variable PREREQ to TRUE
  Set Variable PRELIST to $PRELIST$$NEWLINE$Previous Version Uninstallation
end
if Variable RECOMMENDEDUPGRADE Equals TRUE
  Comment: Uninstall via Native Engine
  Set Variable PREREQ to TRUE
  Set Variable PRELIST to $PRELIST$$NEWLINE$Previous Version Removal
end
[compiler end]
[END REGION]
 
[DEFINE REGION: Install Application Pre-Requisites]
Comment: Install setup pre-requisites
if Variable PREREQ not Equals FALSE
  Comment: Display Dialog: prereq, wait for dialog to return (modal)
  if Variable WIZARD Equals CANCEL
    Terminate Installation
  end
  Comment: Display Dialog: progressprereq, use as progress dialog (non-modal)
  [compiler if Variable BUILDMODE not Equals PATCH]
  if Variable NEEDSUPGRADE Equals TRUE
    Set Variable REMOVEOLD to 
    Set Variable ERROROLD to 
    Install/Remove MSI Package $PRODUCTCODE$[REMOVE=ALL] (get result into variable REMOVEOLD)
    if Variable REMOVEOLD Equals ERROR
      MessageBox: $TITLE$ Setup, Unable to uninstall old version of $TITLE$. Please uninstall it yourself using Control Panel Add-Remove Programs before attempting to install this product.$NEWLINE$$NEWLINE$$ERROROLD$
      Terminate Installation
    end
    if Variable REMOVEOLD Equals REBOOT
      MessageBox: $TITLE$ Setup, Your computer needs to be restarted before $TITLE$ Setup can continue.$NEWLINE$$NEWLINE$Please save your work in all running programs and click OK to restart your computer. Setup will resume once your computer restarts.$NEWLINE$$NEWLINE$If you click CANCEL, setup will exit. You will have to run setup again at a later time to install $TITLE$.
      if Variable REBOOTNOW Equals OK
        Reboot Computer and Resume Setup
      else
        Terminate Installation
      end
    end
    Set Variable MAINTENANCE to FALSE
  end
  if Variable RECOMMENDEDUPGRADE Equals TRUE
    Comment: Bind to external setup log
    Set Variable NATIVE_LOGGING to $NATIVE_OLDLOG$
    Set Variable NATIVE_ENGINE_MODE to $NATIVE_ENGINE$
    Set Variable NATIVE_ENGINE to TRUE
    Apply Uninstall (get result into variable NATIVE_UNINSTALL)
    Set Variable NATIVE_ENGINE to $NATIVE_ENGINE_MODE$
    if Variable NATIVE_UNINSTALL Equals REBOOT
      MessageBox: $TITLE$ Setup, Your computer needs to be restarted before $TITLE$ Setup can continue.$NEWLINE$$NEWLINE$Please save your work in all running programs and click OK to restart your computer. Setup will resume once your computer restarts.$NEWLINE$$NEWLINE$If you click CANCEL, setup will exit. You will have to run setup again at a later time to install $TITLE$.
      if Variable REBOOTNOW Equals OK
        Reboot Computer and Resume Setup
      else
        Terminate Installation
      end
    else
      if Variable NATIVE_UNINSTALL not Equals COMPLETE
        MessageBox: $TITLE$ Setup, Unable to uninstall old version of $TITLE$. It is strongly recommended that you uninstall it yourself using Control Panel Add-Remove Programs before attempting to install this product.$NEWLINE$$NEWLINE$$LASTERROR$$NEWLINE$$NEWLINE$Click OK to quit $TITLE$ Setup.$NEWLINE$$NEWLINE$Click Cancel to continue $TITLE$ Setup anyways (not recommended).
        if Variable NATIVE_ERROR Equals OK
          Terminate Installation
        end
      end
    end
    Comment: Bind to internal setup log
    Set Variable NATIVE_LOGGING to 
  end
  [compiler end]
  Hide Dialog
end
[END REGION]
 
[END REGION]
 
[DEFINE REGION: Define Setup Globals]
Comment: Define Setup Components
Define Component: WinFluor Setup
 
Comment: Initialize Setup Globals
Set x64 - Native 64 bit Windows, AMD64 and EM64T Architectures - installation mode
Get System Setting Windows NT Kernel (NT4, 2000, XP, 2003, Vista, 2008) into ISNT
Get Folder Location System->Program Files Directory into PROGRAMFILES
Get Common Folder Location System->Program Files Directory into COMMONFILES
Get Common Folder Location Start Menu->Programs Group into SHORTCUTFILESALL
Get Folder Location Start Menu->Programs Group into SHORTCUTFILES
if Variable SHORTCUTFILESALL Equals 
  Set Variable SHORTCUTFILESALL to $SHORTCUTFILES$
end
Get Folder Location System->Desktop Directory into DESKTOPDIR
Get Folder Location System->Windows Directory into WINDIR
Get Folder Location System->System Directory into SYSTEM32
Set Win32 - Native 32 bit Windows and Windows 32 on Windows 64 (WOW64) - installation mode
Get Folder Location System->System Directory into SYSWOW64
Get Folder Location System->Program Files Directory into PROGRAMFILES_X86
Get Common Folder Location System->Program Files Directory into COMMONFILES_X86
Set x64 - Native 64 bit Windows, AMD64 and EM64T Architectures - installation mode
Get Folder Location Taskbar->Quick Launch Directory into QUICKLAUNCHDIR
Get Folder Location WWW->WWWRoot into WWWROOTDIR
[END REGION]
 
[DEFINE REGION: Setup User Interview]
if Variable MAINTENANCE Equals TRUE
  GoTo Label: Maintenance
else
  [compiler if Variable BUILDMODE not Equals PATCH]
  Comment: First Time Install
  Set Variable TARGETDIR to $PROGRAMFILES$\$TITLE$
  Get Common Folder Location Special->Boot Path into TARGETDIR_X86
  Set Persistent Variable TARGETDIR_X86 to $PROGRAMFILES_X86$\$TITLE$
  Set Variable STARTMENU to $TITLE$
  Set Variable NATIVE_ENGINE to TRUE
  [compiler end]
end
 
label: Welcome Dialog
Display Dialog: welcome, wait for dialog to return (modal)
if Variable WIZARD Equals CANCEL
  GoTo Label: Main Install
end
[compiler if Variable BUILDMODE not Equals PATCH]
label: License Check
Display Dialog: licensecheck, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Welcome Dialog
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: ReadMe Information
Comment: Display Dialog: readme, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: License Check
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: User Registration
Comment: Display Dialog: registration, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: ReadMe Information
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Setup Type
Comment: Display Dialog: setuptype, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: User Registration
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
Comment: TO-DO: Customize your minimum setup here
if Variable MINIMUM Equals TRUE
  Deselect Component: WinFluor Setup
else
  if Variable COMPLETE Equals TRUE
    Select Component: WinFluor Setup
  end
end
label: Custom Setup
Comment: Display Dialog: componentstree (if variable PERSONALIZED is TRUE), wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Setup Type
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Destination Directory
Display Dialog: destination, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Custom Setup
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Start Menu
Comment: Display Dialog: startmenu, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Destination Directory
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
[compiler end]
label: Start Installation
Display Dialog: startinstallation, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  [compiler if Variable BUILDMODE not Equals PATCH]
  GoTo Label: Start Menu
  [compiler else]
  GoTo Label: Welcome Dialog
  [compiler end]
else
  GoTo Label: Main Install
end
 
label: Maintenance
Comment: Maintenance Install/Uninstall
wizard loop
Comment: Display Dialog: maintenance, wait for dialog to return (modal)
Comment: Display Dialog: componentstree (if variable MODIFY is TRUE), wait for dialog to return (modal)
Display Dialog: startinstallation, wait for dialog to return (modal)
end
[END REGION]
 
[DEFINE REGION: Process (Un)Installation]
label: Main Install
Comment: Exit Setup if Wizard Loop cancelled
if Variable WIZARD Equals CANCEL
  Terminate Installation
end
 
Comment: Prepare to install
Set Variable PROGRESSTEXT to Installing $TITLE$
Set Variable SUCCESS to 
Set Variable LASTERROR to 
if Variable ALLUSERS Equals TRUE
  Set Variable SHORTCUTFOLDER to $SHORTCUTFILESALL$\$STARTMENU$
else
  Set Variable SHORTCUTFOLDER to $SHORTCUTFILES$\$STARTMENU$
end
Display Dialog: progress, use as progress dialog (non-modal)
 
Comment: Modify Target System
[DEFINE REGION: Perform Uninstallation]
if Variable REMOVE Equals TRUE
  Comment: Uninstall product
  Comment: TO-DO: Insert any additional uninstall commands here
  Apply Uninstall (get result into variable SUCCESS)
  Set Variable PROGRESS to 100
else
  [END REGION]
  [DEFINE REGION: Perform First Time or Maintenance Installation]
  if Variable NATIVE_ENGINE Equals TRUE
    if Variable MAINTENANCE Equals TRUE
      if Variable MODIFY Equals TRUE
        Comment: Facilitate removal of deselected setup features
        Apply Uninstall (get result into variable SUCCESS)
        if Variable SUCCESS Equals CANCEL
          Terminate Installation
        end
      end
      if Variable REPAIR Equals TRUE
        Comment: Prevent rollback when repairing existing installation
        Set Variable NATIVE_ROLLBACK to FALSE
      end
    end
  end
  Comment: Install/Re-Install product
  Create Shortcut $SHORTCUTFOLDER$\Uninstall #TITLE# to $UNINSTALLLINK$
  [OFFLINE CONTENT]
  Create Shortcut $SHORTCUTFOLDER$\WinFluor to $TARGETDIR$\WinFluor.exe, Pin to Start Menu, Pin to Taskbar
  Create Shortcut $DESKTOPDIR$\WinFluor to $TARGETDIR$\WinFluor.exe
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\ccir.CNF to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\ccir.TXT to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\Hamc4880.CNF to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\Hamc4880.txt to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\ixon.cof to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\itxco10.dll to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\osLibrary32.dll to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\osLibrary64.dll to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\WinFluor LineScan.txt to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\WinFluor Test.vbs to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\WinFluor User Guide.pdf to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\WinFluor XY Series.txt to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\WinFluor.chm to $TARGETDIR$
  Install Files C:\Users\John\Documents\Embarcadero\Studio\Projects\WinFluorXE\WinFluor.exe to $TARGETDIR$
  [DEFINE WEB MEDIA WinFluor Setup]
  Get Component WinFluor Setup Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
  end
  Comment: TO-DO: Insert any additional install commands here
  [compiler if Variable BUILDMODE Equals PATCH]
  Apply Patch (get result into variable SUCCESS)
  [compiler else]
  if Variable ADVERTISE Equals TRUE
    Apply Advertised (get result into variable SUCCESS)
  else
    Create File Type IDR with extensions  and associate with program $TARGETDIR$\WinFluor.exe
    Apply Install (get result into variable SUCCESS)
  end
  [compiler end]
  Set Variable PROGRESS to 100
end
[END REGION]
[END REGION]
 
[DEFINE REGION: Finish Setup]
Comment: End of Installation
Hide Dialog
Display Dialog: finish, wait for dialog to return (modal)
if Variable SILENT Equals FALSE
  if Variable REBOOTCOMPUTER Equals TRUE
    if Variable SUCCESS Equals REBOOT
      Reboot Computer
    end
  end
  if Variable RUNAPP Equals TRUE
    if Variable REMOVE Equals FALSE
      if Variable SUCCESS Equals COMPLETE
        Run Program $TARGETDIR$\WinFluor.exe 
        Comment: TO-DO: Insert command that starts your application here
      end
    end
  end
end
[END REGION]
 
